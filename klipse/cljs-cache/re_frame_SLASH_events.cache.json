["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$re-frame.events","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^;","~$re-frame.interceptor","^<","~$re-frame.trace","^=","~$re-frame.registrar","^>","~$interceptor","^<","~$trace","^=","~$re-frame.utils","^A","~$re-frame.loggers","^B","~$re-frame.db","^C"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$console","^B","~$app-db","^C","~$get-handler","^>","~$first-in-vector","^A","~$empty-queue","^;","~$debug-enabled?","^;","~$register-handler","^>"],"~:defs",["^ ","~$kind",["^ ","^7","~$re-frame.events/kind","~:file","re_frame/events.cljc","~:line",11,"~:column",1,"~:end-line",11,"~:end-column",10,"~:meta",["^ ","^P","^8","^Q",11,"^R",6,"^S",11,"^T",10],"~:tag","~$cljs.core/Keyword"],"~$flatten-and-remove-nils",["^ ","~:protocol-inline",null,"^U",["^ ","^P","^8","^Q",14,"^R",8,"^S",14,"^T",31,"~:private",true,"~:arglists",["~#list",["~$quote",["^10",[["~$id","~$interceptors"]]]]],"~:doc","~`interceptors` might have nested collections, and contain nil elements.\n  return a flat collection, with all nils removed.\n  This function is 9/10 about giving good error messages."],"^Z",true,"^7","~$re-frame.events/flatten-and-remove-nils","^P","re_frame/events.cljc","^T",31,"~:method-params",["^10",[["^12","^13"]]],"~:protocol-impl",null,"~:arglists-meta",["^10",[null,null]],"^R",1,"~:variadic?",false,"^Q",14,"~:ret-tag","~$cljs.core/LazySeq","^S",14,"~:max-fixed-arity",2,"~:fn-var",true,"^[",["^10",["^11",["^10",[["^12","^13"]]]]],"^14","~`interceptors` might have nested collections, and contain nil elements.\n  return a flat collection, with all nils removed.\n  This function is 9/10 about giving good error messages."],"~$register",["^ ","^Y",null,"^U",["^ ","^P","^8","^Q",35,"^R",7,"^S",35,"^T",15,"^[",["^10",["^11",["^10",[["^12","^13"]]]]],"^14","Associate the given event `id` with the given collection of `interceptors`.\n\n   `interceptors` may contain nested collections and there may be nils\n   at any level,so process this structure into a simple, nil-less vector\n   before registration.\n\n   Typically, an `event handler` will be at the end of the chain (wrapped\n   in an interceptor)."],"^7","~$re-frame.events/register","^P","re_frame/events.cljc","^T",15,"^16",["^10",[["^12","^13"]]],"^17",null,"^18",["^10",[null,null]],"^R",1,"^19",false,"^Q",35,"^1:","~$any","^S",35,"^1<",2,"^1=",true,"^[",["^10",["^11",["^10",[["^12","^13"]]]]],"^14","Associate the given event `id` with the given collection of `interceptors`.\n\n   `interceptors` may contain nested collections and there may be nils\n   at any level,so process this structure into a simple, nil-less vector\n   before registration.\n\n   Typically, an `event handler` will be at the end of the chain (wrapped\n   in an interceptor)."],"~$*handling*",["^ ","^U",["^ ","^P","^8","^Q",51,"^R",16,"^S",51,"^T",26,"~:dynamic",true],"^7","~$re-frame.events/*handling*","^P","re_frame/events.cljc","^T",26,"^R",1,"^1B",true,"^Q",51,"^S",51,"^V","^1@"],"~$handle",["^ ","^Y",null,"^U",["^ ","^P","^8","^Q",53,"^R",7,"^S",53,"^T",13,"^[",["^10",["^11",["^10",[["~$event-v"]]]]],"^14","Given an event vector `event-v`, look up the associated interceptor chain, and execute it."],"^7","~$re-frame.events/handle","^P","re_frame/events.cljc","^T",13,"^16",["^10",[["^1E"]]],"^17",null,"^18",["^10",[null,null]],"^R",1,"^19",false,"^Q",53,"^1:",["^6",["^1@",null,"~$clj-nil"]],"^S",53,"^1<",1,"^1=",true,"^[",["^10",["^11",["^10",[["^1E"]]]]],"^14","Given an event vector `event-v`, look up the associated interceptor chain, and execute it."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^@","^=","^=","^="],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:tags","~:app-db-after","~:operation","~:start","~:app-db-before","~:duration","~:event","~:error","~:end","~:op-type"]],"~:order",["^1R","^1S","^1N","^1U","^1L","^1O","^1Q","^1T","^1P","^1M"]],"^14",null]