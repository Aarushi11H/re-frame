// Compiled by ClojureScript 1.10.597
goog.provide("re_frame.trace");
re_frame.trace.id = cljs.core.atom.call(null,(0));
re_frame.trace._STAR_current_trace_STAR_ = null;
re_frame.trace.reset_tracing_BANG_ = (function re_frame$trace$reset_tracing_BANG_(){
return cljs.core.reset_BANG_.call(null,re_frame.trace.id,(0));
});

/** @define {boolean} */
goog.define("re_frame.trace.trace_enabled_QMARK_",false);
/**
 * See https://groups.google.com/d/msg/clojurescript/jk43kmYiMhA/IHglVr_TPdgJ for more details
 */
re_frame.trace.is_trace_enabled_QMARK_ = (function re_frame$trace$is_trace_enabled_QMARK_(){
return re_frame.trace.trace_enabled_QMARK_;
});
re_frame.trace.trace_cbs = cljs.core.atom.call(null,cljs.core.PersistentArrayMap.EMPTY);
if((typeof re_frame !== 'undefined') && (typeof re_frame.trace !== 'undefined') && (typeof re_frame.trace.traces !== 'undefined')){
} else {
re_frame.trace.traces = cljs.core.atom.call(null,cljs.core.PersistentVector.EMPTY);
}
if((typeof re_frame !== 'undefined') && (typeof re_frame.trace !== 'undefined') && (typeof re_frame.trace.next_delivery !== 'undefined')){
} else {
re_frame.trace.next_delivery = cljs.core.atom.call(null,(0));
}
/**
 * Registers a tracing callback function which will receive a collection of one or more traces.
 *   Will replace an existing callback function if it shares the same key.
 */
re_frame.trace.register_trace_cb = (function re_frame$trace$register_trace_cb(key,f){
if(re_frame.trace.trace_enabled_QMARK_){
return cljs.core.swap_BANG_.call(null,re_frame.trace.trace_cbs,cljs.core.assoc,key,f);
} else {
return re_frame.loggers.console.call(null,new cljs.core.Keyword(null,"warn","warn",(-436710552)),"Tracing is not enabled. Please set {\"re_frame.trace.trace_enabled_QMARK_\" true} in :closure-defines. See: https://github.com/day8/re-frame-10x#installation.");
}
});
re_frame.trace.remove_trace_cb = (function re_frame$trace$remove_trace_cb(key){
cljs.core.swap_BANG_.call(null,re_frame.trace.trace_cbs,cljs.core.dissoc,key);

return null;
});
re_frame.trace.next_id = (function re_frame$trace$next_id(){
return cljs.core.swap_BANG_.call(null,re_frame.trace.id,cljs.core.inc);
});
re_frame.trace.start_trace = (function re_frame$trace$start_trace(p__767){
var map__768 = p__767;
var map__768__$1 = (((((!((map__768 == null))))?(((((map__768.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__768.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.call(null,cljs.core.hash_map,map__768):map__768);
var operation = cljs.core.get.call(null,map__768__$1,new cljs.core.Keyword(null,"operation","operation",(-1267664310)));
var op_type = cljs.core.get.call(null,map__768__$1,new cljs.core.Keyword(null,"op-type","op-type",(-1636141668)));
var tags = cljs.core.get.call(null,map__768__$1,new cljs.core.Keyword(null,"tags","tags",(1771418977)));
var child_of = cljs.core.get.call(null,map__768__$1,new cljs.core.Keyword(null,"child-of","child-of",(-903376662)));
return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,"id","id",(-1388402092)),re_frame.trace.next_id.call(null),new cljs.core.Keyword(null,"operation","operation",(-1267664310)),operation,new cljs.core.Keyword(null,"op-type","op-type",(-1636141668)),op_type,new cljs.core.Keyword(null,"tags","tags",(1771418977)),tags,new cljs.core.Keyword(null,"child-of","child-of",(-903376662)),(function (){var or__10112__auto__ = child_of;
if(cljs.core.truth_(or__10112__auto__)){
return or__10112__auto__;
} else {
return new cljs.core.Keyword(null,"id","id",(-1388402092)).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_);
}
})(),new cljs.core.Keyword(null,"start","start",(-355208981)),re_frame.interop.now.call(null)], null);
});
re_frame.trace.debounce_time = (50);
re_frame.trace.debounce = (function re_frame$trace$debounce(f,interval){
return goog.functions.debounce(f,interval);
});
re_frame.trace.schedule_debounce = re_frame.trace.debounce.call(null,(function re_frame$trace$tracing_cb_debounced(){
var seq__770_790 = cljs.core.seq.call(null,cljs.core.deref.call(null,re_frame.trace.trace_cbs));
var chunk__771_791 = null;
var count__772_792 = (0);
var i__773_793 = (0);
while(true){
if((i__773_793 < count__772_792)){
var vec__782_794 = cljs.core._nth.call(null,chunk__771_791,i__773_793);
var k_795 = cljs.core.nth.call(null,vec__782_794,(0),null);
var cb_796 = cljs.core.nth.call(null,vec__782_794,(1),null);
try{cb_796.call(null,cljs.core.deref.call(null,re_frame.trace.traces));
}catch (e785){var e_797 = e785;
re_frame.loggers.console.call(null,new cljs.core.Keyword(null,"error","error",(-978969032)),"Error thrown from trace cb",k_795,"while storing",cljs.core.deref.call(null,re_frame.trace.traces),e_797);
}

var G__798 = seq__770_790;
var G__799 = chunk__771_791;
var G__800 = count__772_792;
var G__801 = (i__773_793 + (1));
seq__770_790 = G__798;
chunk__771_791 = G__799;
count__772_792 = G__800;
i__773_793 = G__801;
continue;
} else {
var temp__9646__auto___802 = cljs.core.seq.call(null,seq__770_790);
if(temp__9646__auto___802){
var seq__770_803__$1 = temp__9646__auto___802;
if(cljs.core.chunked_seq_QMARK_.call(null,seq__770_803__$1)){
var c__11729__auto___804 = cljs.core.chunk_first.call(null,seq__770_803__$1);
var G__805 = cljs.core.chunk_rest.call(null,seq__770_803__$1);
var G__806 = c__11729__auto___804;
var G__807 = cljs.core.count.call(null,c__11729__auto___804);
var G__808 = (0);
seq__770_790 = G__805;
chunk__771_791 = G__806;
count__772_792 = G__807;
i__773_793 = G__808;
continue;
} else {
var vec__786_809 = cljs.core.first.call(null,seq__770_803__$1);
var k_810 = cljs.core.nth.call(null,vec__786_809,(0),null);
var cb_811 = cljs.core.nth.call(null,vec__786_809,(1),null);
try{cb_811.call(null,cljs.core.deref.call(null,re_frame.trace.traces));
}catch (e789){var e_812 = e789;
re_frame.loggers.console.call(null,new cljs.core.Keyword(null,"error","error",(-978969032)),"Error thrown from trace cb",k_810,"while storing",cljs.core.deref.call(null,re_frame.trace.traces),e_812);
}

var G__813 = cljs.core.next.call(null,seq__770_803__$1);
var G__814 = null;
var G__815 = (0);
var G__816 = (0);
seq__770_790 = G__813;
chunk__771_791 = G__814;
count__772_792 = G__815;
i__773_793 = G__816;
continue;
}
} else {
}
}
break;
}

return cljs.core.reset_BANG_.call(null,re_frame.trace.traces,cljs.core.PersistentVector.EMPTY);
}),re_frame.trace.debounce_time);
re_frame.trace.run_tracing_callbacks_BANG_ = (function re_frame$trace$run_tracing_callbacks_BANG_(now){
if(((cljs.core.deref.call(null,re_frame.trace.next_delivery) - (25)) < now)){
re_frame.trace.schedule_debounce.call(null);

return cljs.core.reset_BANG_.call(null,re_frame.trace.next_delivery,(now + re_frame.trace.debounce_time));
} else {
return null;
}
});

//# sourceURL=re_frame/trace.js
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVfZnJhbWUvdHJhY2UuanMiLCJzb3VyY2VzIjpbInRyYWNlLmNsanMiXSwibGluZUNvdW50IjoxNDAsIm1hcHBpbmdzIjoiO0FBVUEsQUFBS0Esb0JBQUcseUJBQUEsekJBQUNDO0FBQ1QsMkNBQUEsM0NBQWVDO0FBRWYscUNBQUEsckNBQU1DO0FBQU4sQUFDRSx5REFBQSxsREFBQ0MsZ0NBQU9KOztBQUVELEFBQUEsQUFBQTtBQUFBO0FBQUEsQUFBQUssWUFBQSxzQ0FBQTtBQUdUOzs7eUNBQUEsekNBQWVDO0FBQWYsQUFPRUM7O0FBRUYsQUFBS0MsMkJBQVUseUJBQUEsekJBQUNQO0FBQ2hCLEdBQUEsUUFBQVEscUNBQUFDLDJDQUFBQztBQUFBO0FBQUEsQUFBQSxBQUFTQyx3QkFBTyx5QkFBQSx6QkFBQ1g7O0FBQ2pCLEdBQUEsUUFBQVEscUNBQUFDLDJDQUFBRztBQUFBO0FBQUEsQUFBQSxBQUFTQywrQkFBYyx5QkFBQSx6QkFBQ2I7O0FBRXhCOzs7O21DQUFBLG5DQUFNYyw4RUFHSEMsSUFBSUM7QUFIUCxBQUlFLEdBQUlWO0FBQ0YsT0FBQ1csK0JBQU1WLHlCQUFVVyxnQkFBTUgsSUFBSUM7O0FBQzNCLDBDQUFBLHVEQUFBLDFGQUFDRzs7O0FBRUwsaUNBQUEsakNBQU1DLDBFQUFpQkw7QUFBdkIsQUFDRSxBQUFDRSwrQkFBTVYseUJBQVVjLGlCQUFPTjs7QUFEMUI7O0FBSUEseUJBQUEsekJBQU1PO0FBQU4sQUFBaUIsT0FBQ0wsK0JBQU1sQixrQkFBR3dCOztBQUUzQiw2QkFBQSxxQ0FBQUMsbEVBQU1NO0FBQU4sQUFBQSxJQUFBTCxXQUFBRDtJQUFBQyxlQUFBLEVBQUEsRUFBQSxHQUFBLENBQUFBLFlBQUEsU0FBQSxFQUFBLEVBQUEsQ0FBQSxBQUFBQSwrQ0FBQSxXQUFBLENBQUFDLGdDQUFBLEFBQUFELDZCQUFBLEtBQUEsT0FBQSxRQUFBLEFBQUFFLDBCQUFBQyxtQkFBQUgsVUFBQUE7Z0JBQUEsQUFBQUksd0JBQUFKLGFBQUEsakRBQTJCTTtjQUEzQixBQUFBRix3QkFBQUosYUFBQSwvQ0FBcUNPO1dBQXJDLEFBQUFILHdCQUFBSixhQUFBLDVDQUE2Q1E7ZUFBN0MsQUFBQUosd0JBQUFKLGFBQUEsaERBQWtEUztBQUFsRCxBQUFBLGtEQUFBLHNGQUFBLDRFQUFBLHNFQUFBLDREQUFBLGhQQUNjLEFBQUNaLG9HQUNEUyx3RUFDQUMsK0RBQ0FDLG9FQUNBLGlCQUFBRSxvQkFBSUQ7QUFBSixBQUFBLG9CQUFBQztBQUFBQTs7QUFBYSxPQUFBLGtGQUFLbEM7O0tBTGhDLHlEQU1jLEFBQUNtQzs7QUFjZiwrQkFBQSwvQkFBS0M7QUFFTCwwQkFBQSwxQkFBTUMsNERBQVV0QixFQUFFdUI7QUFBbEIsQUFDVyxPQUFDQyx3QkFBd0J4QixFQUFFdUI7O0FBR3RDLEFBQUtFLG1DQUNILEFBQUNILGtDQUNDO0FBQUEsQUFDRSxJQUFBSSxlQUFBLEFBQUFDLHdCQUFBLEFBQUFDLDBCQUFnQnJDO0lBQWhCc0MsaUJBQUE7SUFBQUMsaUJBQUE7SUFBQUMsYUFBQTs7QUFBQSxBQUFBLEdBQUEsQUFBQSxDQUFBQSxhQUFBRDtBQUFBLElBQUFFLGVBQUEsQUFBQUMseUJBQUFKLGVBQUFFO1lBQUEsQUFBQUcsd0JBQUFGLGFBQUEsSUFBQSxqREFBU1k7YUFBVCxBQUFBVix3QkFBQUYsYUFBQSxJQUFBLGxEQUFXYTtBQUFYLEFBQUEsQUFDRSxJQUFBLEFBQUssaUJBQUEsQUFBQWpCLGpCQUFDaUIsMkNBQUlsRDtjQUFWLFlBQUFtRCxSQUc4QkU7QUFIOUIsQUFJZ0IsbUNBQUEseURBQUEsbUNBQUEsZ0JBQUEsQUFBQXBCLC9JQUFDekIseUhBQTRDeUMsZ0RBQW1CakQsdUJBQU9xRDs7QUFMekY7QUFBQSxhQUFBdEI7YUFBQUc7YUFBQUM7YUFBQSxDQUFBQyxhQUFBOzs7Ozs7O0FBQUEsSUFBQUkseUJBQUEsQUFBQVIsd0JBQUFEO0FBQUEsQUFBQSxHQUFBUztBQUFBLEFBQUEsSUFBQVQsbUJBQUFTO0FBQUEsQUFBQSxHQUFBLEFBQUFDLHVDQUFBVjtBQUFBLElBQUFXLHVCQUFBLEFBQUFDLGdDQUFBWjtBQUFBLEFBQUEsYUFBQSxBQUFBYSwrQkFBQWI7YUFBQVc7YUFBQSxBQUFBRywwQkFBQUg7YUFBQTs7Ozs7OztBQUFBLElBQUFJLGVBQUEsQUFBQUMsMEJBQUFoQjtZQUFBLEFBQUFRLHdCQUFBTyxhQUFBLElBQUEsakRBQVNHO2FBQVQsQUFBQVYsd0JBQUFPLGFBQUEsSUFBQSxsREFBV0k7QUFBWCxBQUFBLEFBQ0UsSUFBQSxBQUFLLGlCQUFBLEFBQUFqQixqQkFBQ2lCLDJDQUFJbEQ7Y0FBVixZQUFBb0QsUkFHOEJDO0FBSDlCLEFBSWdCLG1DQUFBLHlEQUFBLG1DQUFBLGdCQUFBLEFBQUFwQiwvSUFBQ3pCLHlIQUE0Q3lDLGdEQUFtQmpELHVCQUFPcUQ7O0FBTHpGO0FBQUEsYUFBQSxBQUFBTCx5QkFBQWpCO2FBQUE7YUFBQTthQUFBOzs7Ozs7OztBQUFBOzs7OztBQU1BLDZEQUFBLHREQUFDdkMsZ0NBQU9RO0dBQ1YwQjtBQUVKLDZDQUFBLDdDQUFNNEIsa0dBQXdCQztBQUE5QixBQU9FLEdBQU0sQ0FBRyxDQUFBLEFBQUF0QiwwREFBQSxoQ0FBSS9CLHdDQUFrQnFEO0FBQS9CLEFBQ0UsQUFBQ3pCOztBQUlELE9BQUN0QyxnQ0FBT1UsNkJBQWMsQ0FBR3FELE1BQUk3Qjs7QUFML0I7OztBQU9GIiwibmFtZXMiOlsicmUtZnJhbWUudHJhY2UvaWQiLCJjbGpzLmNvcmUvYXRvbSIsInJlLWZyYW1lLnRyYWNlLypjdXJyZW50LXRyYWNlKiIsInJlLWZyYW1lLnRyYWNlL3Jlc2V0LXRyYWNpbmchIiwiY2xqcy5jb3JlL3Jlc2V0ISIsImdvb2cvZGVmaW5lIiwicmUtZnJhbWUudHJhY2UvaXMtdHJhY2UtZW5hYmxlZD8iLCJyZS1mcmFtZS50cmFjZS90cmFjZS1lbmFibGVkPyIsInJlLWZyYW1lLnRyYWNlL3RyYWNlLWNicyIsImpzL3JlLWZyYW1lIiwianMvcmUtZnJhbWUudHJhY2UiLCJqcy9yZS1mcmFtZS50cmFjZS50cmFjZXMiLCJyZS1mcmFtZS50cmFjZS90cmFjZXMiLCJqcy9yZS1mcmFtZS50cmFjZS5uZXh0LWRlbGl2ZXJ5IiwicmUtZnJhbWUudHJhY2UvbmV4dC1kZWxpdmVyeSIsInJlLWZyYW1lLnRyYWNlL3JlZ2lzdGVyLXRyYWNlLWNiIiwia2V5IiwiZiIsImNsanMuY29yZS9zd2FwISIsImNsanMuY29yZS9hc3NvYyIsInJlLWZyYW1lLmxvZ2dlcnMvY29uc29sZSIsInJlLWZyYW1lLnRyYWNlL3JlbW92ZS10cmFjZS1jYiIsImNsanMuY29yZS9kaXNzb2MiLCJyZS1mcmFtZS50cmFjZS9uZXh0LWlkIiwiY2xqcy5jb3JlL2luYyIsInBfXzc2NyIsIm1hcF9fNzY4IiwiY2xqcy5jb3JlL1BST1RPQ09MX1NFTlRJTkVMIiwiY2xqcy5jb3JlL2FwcGx5IiwiY2xqcy5jb3JlL2hhc2gtbWFwIiwiY2xqcy5jb3JlL2dldCIsInJlLWZyYW1lLnRyYWNlL3N0YXJ0LXRyYWNlIiwib3BlcmF0aW9uIiwib3AtdHlwZSIsInRhZ3MiLCJjaGlsZC1vZiIsIm9yX18xMDExMl9fYXV0b19fIiwicmUtZnJhbWUuaW50ZXJvcC9ub3ciLCJyZS1mcmFtZS50cmFjZS9kZWJvdW5jZS10aW1lIiwicmUtZnJhbWUudHJhY2UvZGVib3VuY2UiLCJpbnRlcnZhbCIsImdvb2cuZnVuY3Rpb25zL2RlYm91bmNlIiwicmUtZnJhbWUudHJhY2Uvc2NoZWR1bGUtZGVib3VuY2UiLCJzZXFfXzc3MCIsImNsanMuY29yZS9zZXEiLCJjbGpzLmNvcmUvZGVyZWYiLCJjaHVua19fNzcxIiwiY291bnRfXzc3MiIsImlfXzc3MyIsInZlY19fNzgyIiwiY2xqcy5jb3JlLy1udGgiLCJjbGpzLmNvcmUvbnRoIiwidGVtcF9fOTY0Nl9fYXV0b19fIiwiY2xqcy5jb3JlL2NodW5rZWQtc2VxPyIsImNfXzExNzI5X19hdXRvX18iLCJjbGpzLmNvcmUvY2h1bmstZmlyc3QiLCJjbGpzLmNvcmUvY2h1bmstcmVzdCIsImNsanMuY29yZS9jb3VudCIsInZlY19fNzg2IiwiY2xqcy5jb3JlL2ZpcnN0IiwiY2xqcy5jb3JlL25leHQiLCJrIiwiY2IiLCJlNzg1IiwiZTc4OSIsImUiLCJyZS1mcmFtZS50cmFjZS9ydW4tdHJhY2luZy1jYWxsYmFja3MhIiwibm93Il0sInNvdXJjZXNDb250ZW50IjpbIihucyByZS1mcmFtZS50cmFjZVxuICBcIlRyYWNpbmcgZm9yIHJlLWZyYW1lLlxuICBBbHBoYSBxdWFsaXR5LCBzdWJqZWN0IHRvIGNoYW5nZS9icmVhayBhdCBhbnkgdGltZS5cIlxuICAjPyg6Y2xqcyAoOnJlcXVpcmUtbWFjcm9zIFtuZXQuY2dyYW5kLm1hY3JvdmljaCA6YXMgbWFjcm9zXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtyZS1mcmFtZS50cmFjZSA6cmVmZXIgW2ZpbmlzaC10cmFjZSB3aXRoLXRyYWNlIG1lcmdlLXRyYWNlIV1dKSlcbiAgKDpyZXF1aXJlIFtyZS1mcmFtZS5pbnRlcm9wIDphcyBpbnRlcm9wXVxuICAgICAgICAgICAgW3JlLWZyYW1lLmxvZ2dlcnMgOnJlZmVyIFtjb25zb2xlXV1cbiAgICAgICAgICAgICM/KDpjbGogW25ldC5jZ3JhbmQubWFjcm92aWNoIDphcyBtYWNyb3NdKVxuICAgICAgICAgICAgIz8oOmNsanMgW2dvb2cuZnVuY3Rpb25zXSkpKVxuXG4oZGVmIGlkIChhdG9tIDApKVxuKGRlZiBeOmR5bmFtaWMgKmN1cnJlbnQtdHJhY2UqIG5pbClcblxuKGRlZm4gcmVzZXQtdHJhY2luZyEgW11cbiAgKHJlc2V0ISBpZCAwKSlcblxuIz8oOmNsanMgKGdvb2ctZGVmaW5lIHRyYWNlLWVuYWJsZWQ/IGZhbHNlKVxuICAgOmNsaiAgKGRlZiBeYm9vbGVhbiB0cmFjZS1lbmFibGVkPyBmYWxzZSkpXG5cbihkZWZuIF5ib29sZWFuIGlzLXRyYWNlLWVuYWJsZWQ/XG4gIFwiU2VlIGh0dHBzOi8vZ3JvdXBzLmdvb2dsZS5jb20vZC9tc2cvY2xvanVyZXNjcmlwdC9qazQza21ZaU1oQS9JSGdsVnJfVFBkZ0ogZm9yIG1vcmUgZGV0YWlsc1wiXG4gIDs7IFdlIGNhbiByZW1vdmUgdGhpcyBleHRyYSBzdGVwIG9mIHR5cGUgaGludGluZyBpbmRpcmVjdGlvbiBvbmNlIG91ciBtaW5pbXVtIENMSlMgdmVyc2lvbiBpbmNsdWRlc1xuICA7OyBodHRwczovL2Rldi5jbG9qdXJlLm9yZy9qaXJhL2Jyb3dzZS9DTEpTLTE0MzlcbiAgOzsgcjEuMTAuNjMgaXMgdGhlIGZpcnN0IHZlcnNpb24gd2l0aCB0aGlzOlxuICA7OyBodHRwczovL2dpdGh1Yi5jb20vY2xvanVyZS9jbG9qdXJlc2NyaXB0L2NvbW1pdC85ZWM3OTZkNzkxYjFiMmJkNjEzYWYyZjYyY2RlY2ZkMjVjYWE2NDgyXG4gIFtdXG4gIHRyYWNlLWVuYWJsZWQ/KVxuXG4oZGVmIHRyYWNlLWNicyAoYXRvbSB7fSkpXG4oZGVmb25jZSB0cmFjZXMgKGF0b20gW10pKVxuKGRlZm9uY2UgbmV4dC1kZWxpdmVyeSAoYXRvbSAwKSlcblxuKGRlZm4gcmVnaXN0ZXItdHJhY2UtY2JcbiAgXCJSZWdpc3RlcnMgYSB0cmFjaW5nIGNhbGxiYWNrIGZ1bmN0aW9uIHdoaWNoIHdpbGwgcmVjZWl2ZSBhIGNvbGxlY3Rpb24gb2Ygb25lIG9yIG1vcmUgdHJhY2VzLlxuICBXaWxsIHJlcGxhY2UgYW4gZXhpc3RpbmcgY2FsbGJhY2sgZnVuY3Rpb24gaWYgaXQgc2hhcmVzIHRoZSBzYW1lIGtleS5cIlxuICBba2V5IGZdXG4gIChpZiB0cmFjZS1lbmFibGVkP1xuICAgIChzd2FwISB0cmFjZS1jYnMgYXNzb2Mga2V5IGYpXG4gICAgKGNvbnNvbGUgOndhcm4gXCJUcmFjaW5nIGlzIG5vdCBlbmFibGVkLiBQbGVhc2Ugc2V0IHtcXFwicmVfZnJhbWUudHJhY2UudHJhY2VfZW5hYmxlZF9RTUFSS19cXFwiIHRydWV9IGluIDpjbG9zdXJlLWRlZmluZXMuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RheTgvcmUtZnJhbWUtMTB4I2luc3RhbGxhdGlvbi5cIikpKVxuXG4oZGVmbiByZW1vdmUtdHJhY2UtY2IgW2tleV1cbiAgKHN3YXAhIHRyYWNlLWNicyBkaXNzb2Mga2V5KVxuICBuaWwpXG5cbihkZWZuIG5leHQtaWQgW10gKHN3YXAhIGlkIGluYykpXG5cbihkZWZuIHN0YXJ0LXRyYWNlIFt7OmtleXMgW29wZXJhdGlvbiBvcC10eXBlIHRhZ3MgY2hpbGQtb2ZdfV1cbiAgezppZCAgICAgICAgKG5leHQtaWQpXG4gICA6b3BlcmF0aW9uIG9wZXJhdGlvblxuICAgOm9wLXR5cGUgICBvcC10eXBlXG4gICA6dGFncyAgICAgIHRhZ3NcbiAgIDpjaGlsZC1vZiAgKG9yIGNoaWxkLW9mICg6aWQgKmN1cnJlbnQtdHJhY2UqKSlcbiAgIDpzdGFydCAgICAgKGludGVyb3Avbm93KX0pXG5cbjs7IE9uIGRlYm91bmNpbmdcbjs7XG47OyBXZSBkZWJvdW5jZSBkZWxpdmVyaW5nIHRyYWNlcyB0byByZWdpc3RlcmVkIGNicyBzbyB0aGF0XG47OyB3ZSBjYW4gZGVsaXZlciB0aGVtIGluIGJhdGNoZXMuIFRoaXMgYWlkcyB1cyBpbiBlZmZpY2llbmN5XG47OyBidXQgYWxzbyBpbXBvcnRhbnRseSBsZXRzIHVzIGF2b2lkIHNsb3dpbmcgZG93biB0aGUgaG9zdFxuOzsgYXBwbGljYXRpb24gYnkgcnVubmluZyBhbnkgdHJhY2UgY29kZSBpbiB0aGUgY3JpdGljYWwgcGF0aC5cbjs7XG47OyBXZSBhZGQgYSBsaWdodHdlaWdodCBjaGVjayBvbiB0b3Agb2YgZ29vZy5mdW5jdGlvbnMvZGVib3VuY2Vcbjs7IHRvIGF2b2lkIGNvbnN0YW50IHNldHRpbmcgYW5kIGNhbmNlbGxpbmcgb2YgdGltZW91dHMuIFRoaXNcbjs7IG1lYW5zIHRoYXQgd2Ugd2lsbCBkZWxpdmVyIHRyYWNlcyBiZXR3ZWVuIDEwLTUwIG1zIGZyb20gdGhlXG47OyBsYXN0IHRyYWNlIGJlaW5nIGNyZWF0ZWQsIHdoaWNoIHN0aWxsIGFjaGlldmVzIG91ciBnb2Fscy5cblxuKGRlZiBkZWJvdW5jZS10aW1lIDUwKVxuXG4oZGVmbiBkZWJvdW5jZSBbZiBpbnRlcnZhbF1cbiAgIz8oOmNsanMgKGdvb2cuZnVuY3Rpb25zL2RlYm91bmNlIGYgaW50ZXJ2YWwpXG4gICAgIDpjbGogIChmKSkpXG5cbihkZWYgc2NoZWR1bGUtZGVib3VuY2VcbiAgKGRlYm91bmNlXG4gICAgKGZuIHRyYWNpbmctY2ItZGVib3VuY2VkIFtdXG4gICAgICAoZG9zZXEgW1trIGNiXSBAdHJhY2UtY2JzXVxuICAgICAgICAodHJ5IChjYiBAdHJhY2VzKVxuICAgICAgICAgICAgICM/KDpjbGogKGNhdGNoIEV4Y2VwdGlvbiBlXG4gICAgICAgICAgICAgICAgICAgICAgIChjb25zb2xlIDplcnJvciBcIkVycm9yIHRocm93biBmcm9tIHRyYWNlIGNiXCIgayBcIndoaWxlIHN0b3JpbmdcIiBAdHJhY2VzIGUpKSlcbiAgICAgICAgICAgICAjPyg6Y2xqcyAoY2F0Y2ggOmRlZmF1bHQgZVxuICAgICAgICAgICAgICAgICAgICAgICAgKGNvbnNvbGUgOmVycm9yIFwiRXJyb3IgdGhyb3duIGZyb20gdHJhY2UgY2JcIiBrIFwid2hpbGUgc3RvcmluZ1wiIEB0cmFjZXMgZSkpKSkpXG4gICAgICAocmVzZXQhIHRyYWNlcyBbXSkpXG4gICAgZGVib3VuY2UtdGltZSkpXG5cbihkZWZuIHJ1bi10cmFjaW5nLWNhbGxiYWNrcyEgW25vd11cbiAgOzsgT3B0aW1pc2VkIGRlYm91bmNlLCB3ZSBvbmx5IHJlLWRlYm91bmNlXG4gIDs7IGlmIHdlIGFyZSBjbG9zZSB0byBkZWxpdmVyeSB0aW1lXG4gIDs7IHRvIGF2b2lkIGNvbnN0YW50IHNldHRpbmcgYW5kIGNhbmNlbGxpbmdcbiAgOzsgdGltZW91dHMuXG5cbiAgOzsgSWYgd2UgYXJlIHdpdGhpbiAyNSBtcyBvZiBuZXh0IGRlbGl2ZXJ5XG4gICh3aGVuICg8ICgtIEBuZXh0LWRlbGl2ZXJ5IDI1KSBub3cpXG4gICAgKHNjaGVkdWxlLWRlYm91bmNlKVxuICAgIDs7IFRoZSBuZXh0LWRlbGl2ZXJ5IHRpbWUgaXMgbm90IHBlcmZlY3RseSBhY2N1cmF0ZVxuICAgIDs7IGFzIHNjaGVkdWxpbmcgdGhlIGRlYm91bmNlIHRha2VzIHNvbWUgdGltZSwgYnV0XG4gICAgOzsgaXQncyBnb29kIGVub3VnaCBmb3Igb3VyIHB1cnBvc2VzIGhlcmUuXG4gICAgKHJlc2V0ISBuZXh0LWRlbGl2ZXJ5ICgrIG5vdyBkZWJvdW5jZS10aW1lKSkpKVxuXG4obWFjcm9zL2RlZnRpbWVcbiAgKGRlZm1hY3JvIGZpbmlzaC10cmFjZSBbdHJhY2VdXG4gICAgIGAod2hlbiAoaXMtdHJhY2UtZW5hYmxlZD8pXG4gICAgICAgIChsZXQgW2VuZCMgICAgICAoaW50ZXJvcC9ub3cpXG4gICAgICAgICAgICAgIGR1cmF0aW9uIyAoLSBlbmQjICg6c3RhcnQgfnRyYWNlKSldXG4gICAgICAgICAgKHN3YXAhIHRyYWNlcyBjb25qIChhc3NvYyB+dHJhY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ZHVyYXRpb24gZHVyYXRpb24jXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmVuZCAoaW50ZXJvcC9ub3cpKSlcbiAgICAgICAgICAocnVuLXRyYWNpbmctY2FsbGJhY2tzISBlbmQjKSkpKVxuXG4gKGRlZm1hY3JvIHdpdGgtdHJhY2VcbiAgICAgXCJDcmVhdGUgYSB0cmFjZSBpbnNpZGUgdGhlIHNjb3BlIG9mIHRoZSB3aXRoLXRyYWNlIG1hY3JvXG5cbiAgICAgICAgICBDb21tb24ga2V5cyBmb3IgdHJhY2Utb3B0c1xuICAgICAgICAgIDpvcC10eXBlIC0gd2hhdCBraW5kIG9mIG9wZXJhdGlvbiBpcyB0aGlzPyBlLmcuIDpzdWIvY3JlYXRlLCA6cmVuZGVyLlxuICAgICAgICAgIDpvcGVyYXRpb24gLSBpZGVudGlmaWVyIGZvciB0aGUgb3BlcmF0aW9uLCBmb3IgYSBzdWJzY3JpcHRpb24gaXQgd291bGQgYmUgdGhlIHN1YnNjcmlwdGlvbiBrZXl3b3JkXG4gICAgICAgICAgOnRhZ3MgLSBhIG1hcCBvZiBhcmJpdHJhcnkga3YgcGFpcnNcIlxuICAgICBbezprZXlzIFtvcGVyYXRpb24gb3AtdHlwZSB0YWdzIGNoaWxkLW9mXSA6YXMgdHJhY2Utb3B0c30gJiBib2R5XVxuICAgICBgKGlmIChpcy10cmFjZS1lbmFibGVkPylcbiAgICAgICAgKGJpbmRpbmcgWypjdXJyZW50LXRyYWNlKiAoc3RhcnQtdHJhY2UgfnRyYWNlLW9wdHMpXVxuICAgICAgICAgICh0cnkgfkBib2R5XG4gICAgICAgICAgICAgICAoZmluYWxseSAoZmluaXNoLXRyYWNlICpjdXJyZW50LXRyYWNlKikpKSlcbiAgICAgICAgKGRvIH5AYm9keSkpKVxuXG4gIChkZWZtYWNybyBtZXJnZS10cmFjZSEgW21dXG4gICAgIDs7IE92ZXJ3cml0ZSBrZXlzIGluIHRhZ3MsIGFuZCBhbGwgdG9wIGxldmVsIGtleXMuXG4gICAgIGAod2hlbiAoaXMtdHJhY2UtZW5hYmxlZD8pXG4gICAgICAgIChsZXQgW25ldy10cmFjZSMgKC0+ICh1cGRhdGUgKmN1cnJlbnQtdHJhY2UqIDp0YWdzIG1lcmdlICg6dGFncyB+bSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIChtZXJnZSAoZGlzc29jIH5tIDp0YWdzKSkpXVxuICAgICAgICAgIChzZXQhICpjdXJyZW50LXRyYWNlKiBuZXctdHJhY2UjKSlcbiAgICAgICAgbmlsKSkpXG4iXX0=